package detect

import (
	"encoding/json"
	"fmt"
	"github.com/go-redis/redis/v8"
	"github.com/pochard/commons/randstr"
	"github.com/vmihailenco/msgpack"
	"ip_detect/api"
	"ip_detect/utils/ipip"
	"ip_detect/utils/logger"
	"ip_detect/utils/ping"
	"net"
	"os"
	"sync"
	"time"
)

var RegionMap sync.Map

type AutoGenerated struct {
	Name      string `json:"name"`
	Timestamp int64  `json:"timestamp"`
	Tags      Tags   `json:"tags"`
	Fields    Fields `json:"fields"`
}

type Data struct {
	T            int64   `json:"t"`
	Id           string  `json:"id"`
	SrcMachineId string  `json:"src_machine_id"`
	DstMachineId string  `json:"dst_machine_id"`
	Biz          string  `json:"biz"`
	Bd           string  `json:"bd"`
	Bid          string  `json:"bid"`
	SrcIp        string  `json:"src_ip"`
	SrcCountry   string  `json:"src_country"`
	SrcProvince  string  `json:"src_province"`
	SrcCity      string  `json:"src_city"`
	SrcIsp       string  `json:"src_isp"`
	DstDevice    string  `json:"dst_device"`
	DstIp        string  `json:"dst_ip"`
	DstCountry   string  `json:"dst_country"`
	DstProvince  string  `json:"dst_province"`
	DstCity      string  `json:"dst_city"`
	DstIsp       string  `json:"dst_isp"`
	DstPort      string  `json:"dst_port"`
	DstPortAlive uint8   `json:"dst_port_alive"`
	PingAvg      float64 `json:"ping_avg"`
	PingMax      float64 `json:"ping_max"`
	PingMin      float64 `json:"ping_min"`
	PingLoss     float64 `json:"ping_loss"`
	Mtr          string  `json:"mtr"`
}

type RequestIpaas struct {
	Appid        string `json:"appid"`
	SrcMachineId string `json:"src_machine_id"`
	Data         []Data `json:"data"`
}

type Tags struct {
	Dev      string `json:"dev"`
	SrcIp    string `json:"src_ip"`
	DstIp    string `json:"dst_ip"`
	DstPort  string `json:"dst_port"`
	BizId    string `json:"biz_id"`
	BizBd    string `json:"biz_bd"`
	Province string `json:"province"`
	City     string `json:"city"`
	Isp      string `json:"isp"`
}

type Fields struct {
	PortAlive int     `json:"port_alive"`
	LossRate  float64 `json:"loss_rate"`
	AvgDelay  float64 `json:"avg_delay"`
	MaxDelay  float64 `json:"max_delay"`
	MinDelay  float64 `json:"min_delay"`
}

type DataList []AutoGenerated

type Msg struct {
	Dev       string `json:"dev"`
	Mid       string `json:"mid"`
	Biz       string `json:"biz"`
	BId       string `json:"bid"`
	BD        string `json:"bd"`
	Region    string `json:"region"`
	OuterIp   string `json:"outer_ip"`
	OuterPort string `json:"outer_port"`
	Ping      bool   `json:"ping"`
	Mtr       bool   `json:"mtr"`
	CheckPort bool   `json:"check_port"`
}

type Task struct {
	T          int64
	Uid        string
	Target     *Msg
	PingReturn *ping.PingReturn
	PortAlive  int
}

func (t *Task) ping() {
	if !t.Target.Ping {
		return
	}

	if net.ParseIP(t.Target.OuterIp) == nil {
		p := ping.NewPing(ping.WithTimeout(5), ping.WithCount(32), ping.WithInterval(1000), ping.WithSrcAddr("::"), ping.WithDstAddr(t.Target.OuterIp))
		pingReturn, err := p.PingIpv6()
		if err != nil {
			logger.Global.Errorf("Ping -> %s %s", t.Target.OuterIp, err.Error())
			return
		}
		t.PingReturn = pingReturn
	} else {
		p := ping.NewPing(ping.WithTimeout(5), ping.WithCount(32), ping.WithInterval(1000), ping.WithSrcAddr("0.0.0.0"), ping.WithDstAddr(t.Target.OuterIp))
		pingReturn, err := p.PingIpv4()
		if err != nil {
			logger.Global.Errorf("Ping -> %s %s", t.Target.OuterIp, err.Error())
			return
		}
		t.PingReturn = pingReturn
	}
}

func (t *Task) port() {
	if t.Target.CheckPort {
		conn, err := net.DialTimeout("tcp", net.JoinHostPort(t.Target.OuterIp, t.Target.OuterPort), time.Duration(3)*time.Second)
		if err != nil {
			t.PortAlive = 0
		} else {
			if conn != nil {
				t.PortAlive = 1
				_ = conn.Close()
			} else {
				t.PortAlive = 0
			}
		}
	}
}

func (t *Task) Do(c chan struct{}) {
	t.ping()
	t.port()
	go PushToIpaas(t)
	go PushToBigData(t)
	<-c
}

func NewTask(m *redis.Message) (*Task, error) {
	var msg *Msg
	err := msgpack.Unmarshal([]byte(m.Payload), &msg)
	if err != nil {
		return nil, err
	}

	return &Task{
		T:          time.Now().Unix(),
		Uid:        randstr.RandomAlphanumeric(17),
		Target:     msg,
		PingReturn: &ping.PingReturn{},
	}, nil
}

func PushToIpaas(t *Task) {
	var request RequestIpaas
	var region ipip.Region
	hostname, _ := os.Hostname()
	rg, ok := RegionMap.Load(t.Target.OuterIp)
	if !ok {
		rg, err := ipip.Query(t.Target.OuterIp)
		if err == nil {
			RegionMap.Store(t.Target.OuterIp, rg)
			region = rg
		}
	} else {
		region = rg.(ipip.Region)
	}

	request.SrcMachineId = hostname
	request.Appid = "ipdetect"
	request.Data = append(request.Data, Data{
		T:            t.T,
		Id:           t.Uid,
		SrcMachineId: hostname,
		DstMachineId: "",
		Biz:          t.Target.Biz,
		Bd:           t.Target.BD,
		Bid:          t.Target.BId,
		SrcIp:        "0.0.0.0",
		SrcCountry:   "",
		SrcProvince:  "",
		SrcCity:      "",
		SrcIsp:       "",
		DstDevice:    t.Target.Dev,
		DstIp:        t.Target.OuterIp,
		DstCountry:   region.Country,
		DstProvince:  region.Province,
		DstCity:      region.City,
		DstIsp:       region.Isp,
		DstPort:      t.Target.OuterPort,
		DstPortAlive: uint8(t.PortAlive),
		PingAvg:      t.PingReturn.AvgDelay.Seconds() * 1000,
		PingMax:      t.PingReturn.MaxDelay.Seconds() * 1000,
		PingMin:      t.PingReturn.MinDelay.Seconds() * 1000,
		PingLoss:     t.PingReturn.LossRate,
		Mtr:          "",
	})

	logger.Global.Infof("监测时间: %d, 业务名: %v, 业务ID: %v, 业务BD:%v, 监控目标: %v:%s(%v), 归属: %s, 平均延时: %.2f, 最大延时: %.2f, 最小延时: %.2f, 丢包率: %.2f",
		t.T, t.Target.Biz, t.Target.BId, t.Target.BD, t.Target.OuterIp, t.Target.OuterPort, t.PortAlive, t.Target.Region, t.PingReturn.AvgDelay.Seconds()*1000, t.PingReturn.MaxDelay.Seconds()*1000, t.PingReturn.MinDelay.Seconds()*1000, t.PingReturn.LossRate)
	data, err := json.Marshal(request)
	if err != nil {
		logger.Global.Errorf("json.Marshal %v", err.Error())
		return
	}
	api.PushToIpaas(data)
	//上报MTR
	//if len(t.MtrReturn) == 0 {
	//	return
	//}
	//var mtrValues [][]interface{}
	//for _, h := range t.MtrReturn {
	//	value = []interface{}{t.T, t.Uid, strconv.Itoa(h.RouteNo), h.Addr, float64(h.Loss), strconv.Itoa(h.Snt), float64(h.Avg), float64(h.Best), float64(h.Wrst)}
	//	mtrValues = append(mtrValues, value)
	//}
	//
	//api.PushToIpaas("ipaas", "ip_detect_mtr", []string{"t", "id", "no", "host", "loss", "snt", "avg", "best", "wrst"}, mtrValues)
}

func PushToBigData(t *Task) {
	var dl DataList
	hostname, _ := os.Hostname()
	var region ipip.Region

	rg, ok := RegionMap.Load(t.Target.OuterIp)
	if !ok {
		rg, err := ipip.Query(t.Target.OuterIp)
		if err == nil {
			RegionMap.Store(t.Target.OuterIp, rg)
			region = rg
		}
	} else {
		region = rg.(ipip.Region)
	}

	ipRegion := fmt.Sprintf("%v-%v", region.Province, region.Isp)
	if t.Target.BId == "kuaishou" && ipRegion != "贵州省-中国电信" {
		return
	}

	dl = append(dl, AutoGenerated{
		Name:      "ip_detect",
		Timestamp: t.T,
		Tags: Tags{
			Dev:      t.Target.Dev,
			SrcIp:    hostname,
			DstIp:    t.Target.OuterIp,
			DstPort:  t.Target.OuterPort,
			BizId:    t.Target.BId,
			BizBd:    t.Target.BD,
			Province: region.Province,
			City:     region.City,
			Isp:      region.Isp,
		},
		Fields: Fields{
			PortAlive: t.PortAlive,
			LossRate:  t.PingReturn.LossRate,
			AvgDelay:  t.PingReturn.AvgDelay.Seconds() * 1000,
			MaxDelay:  t.PingReturn.MaxDelay.Seconds() * 1000,
			MinDelay:  t.PingReturn.MinDelay.Seconds() * 1000,
		},
	})

	dataByte, err := json.Marshal(dl)
	if err != nil {
		logger.Global.Errorf("PushToBigData %s", err.Error())
		return
	}
	api.PushToBigData(dataByte)
}
